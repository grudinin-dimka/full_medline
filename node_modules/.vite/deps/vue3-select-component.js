import {
  Fragment,
  Teleport,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createTextVNode,
  createVNode,
  defineComponent,
  mergeModels,
  normalizeClass,
  normalizeStyle,
  onBeforeUnmount,
  onMounted,
  openBlock,
  ref,
  renderList,
  renderSlot,
  toDisplayString,
  useModel,
  vModelText,
  watch,
  withCtx,
  withDirectives,
  withKeys
} from "./chunk-TF6X5W6F.js";
import "./chunk-HKJ2B2AA.js";

// node_modules/vue3-select-component/dist/index.es.js
(function() {
  "use strict";
  try {
    if (typeof document < "u") {
      var e = document.createElement("style");
      e.appendChild(document.createTextNode('@keyframes spinner-circle-animation-ed866313{0%,39%,to{opacity:0}40%{opacity:1}}.spinner[data-v-ed866313]{position:relative;width:var(--vs-spinner-size);height:var(--vs-spinner-size);margin:0;padding:0}.spinner-circle[data-v-ed866313]{width:100%;height:100%;position:absolute;left:0;top:0}.spinner-circle[data-v-ed866313]:before{content:"";display:block;margin:0 auto;width:15%;height:15%;background-color:var(--vs-spinner-color);border-radius:100%;-webkit-animation:spinner-circle-animation-ed866313 1.2s infinite ease-in-out both;animation:spinner-circle-animation-ed866313 1.2s infinite ease-in-out both}.spinner-circle[data-v-ed866313]:nth-child(2){transform:rotate(30deg)}.spinner-circle[data-v-ed866313]:nth-child(3){transform:rotate(60deg)}.spinner-circle[data-v-ed866313]:nth-child(4){transform:rotate(90deg)}.spinner-circle[data-v-ed866313]:nth-child(5){transform:rotate(120deg)}.spinner-circle[data-v-ed866313]:nth-child(6){transform:rotate(150deg)}.spinner-circle[data-v-ed866313]:nth-child(7){transform:rotate(180deg)}.spinner-circle[data-v-ed866313]:nth-child(8){transform:rotate(210deg)}.spinner-circle[data-v-ed866313]:nth-child(9){transform:rotate(240deg)}.spinner-circle[data-v-ed866313]:nth-child(10){transform:rotate(270deg)}.spinner-circle[data-v-ed866313]:nth-child(11){transform:rotate(300deg)}.spinner-circle[data-v-ed866313]:nth-child(12){transform:rotate(330deg)}.spinner-circle[data-v-ed866313]:nth-child(2):before{animation-delay:-1.1s}.spinner-circle[data-v-ed866313]:nth-child(3):before{animation-delay:-1s}.spinner-circle[data-v-ed866313]:nth-child(4):before{animation-delay:-.9s}.spinner-circle[data-v-ed866313]:nth-child(5):before{animation-delay:-.8s}.spinner-circle[data-v-ed866313]:nth-child(6):before{animation-delay:-.7s}.spinner-circle[data-v-ed866313]:nth-child(7):before{animation-delay:-.6s}.spinner-circle[data-v-ed866313]:nth-child(8):before{animation-delay:-.5s}.spinner-circle[data-v-ed866313]:nth-child(9):before{animation-delay:-.4s}.spinner-circle[data-v-ed866313]:nth-child(10):before{animation-delay:-.3s}.spinner-circle[data-v-ed866313]:nth-child(11):before{animation-delay:-.2s}.spinner-circle[data-v-ed866313]:nth-child(12):before{animation-delay:-.1s}:root{--vs-input-bg: #fff;--vs-input-outline: #3b82f6;--vs-input-placeholder-color: #52525b;--vs-padding: .25rem .5rem;--vs-border: 1px solid #e4e4e7;--vs-border-radius: 4px;--vs-font-size: 16px;--vs-font-weight: 400;--vs-font-family: inherit;--vs-text-color: #18181b;--vs-line-height: 1.5;--vs-menu-offset-top: 8px;--vs-menu-height: 200px;--vs-menu-padding: 0;--vs-menu-border: 1px solid #e4e4e7;--vs-menu-bg: #fff;--vs-menu-box-shadow: none;--vs-menu-z-index: 2;--vs-option-padding: 8px 12px;--vs-option-font-size: var(--vs-font-size);--vs-option-font-weight: var(--vs-font-weight);--vs-option-text-color: var(--vs-text-color);--vs-option-bg: var(--vs-menu-bg);--vs-option-hover-color: #dbeafe;--vs-option-focused-color: var(--vs-option-hover-color);--vs-option-selected-color: #93c5fd;--vs-option-disabled-color: #f4f4f5;--vs-option-disabled-text-color: #52525b;--vs-multi-value-gap: 0px;--vs-multi-value-padding: 4px;--vs-multi-value-margin: 4px 0px 4px 6px;--vs-multi-value-font-size: 14px;--vs-multi-value-font-weight: 400;--vs-multi-value-line-height: 1;--vs-multi-value-text-color: #3f3f46;--vs-multi-value-bg: #f4f4f5;--vs-multi-value-xmark-size: 16px;--vs-multi-value-xmark-color: var(--vs-multi-value-text-color);--vs-indicators-gap: 4px;--vs-icon-size: 20px;--vs-icon-color: var(--vs-text-color);--vs-spinner-color: var(--vs-text-color);--vs-spinner-size: 20px;--vs-dropdown-transition: transform .25s ease-out}.vue-select[data-v-7f19f42a]{position:relative;box-sizing:border-box;width:100%}.vue-select[data-v-7f19f42a] *{box-sizing:border-box}.vue-select.open .single-value[data-v-7f19f42a]{position:absolute;opacity:.4}.vue-select.open .dropdown-icon[data-v-7f19f42a]{transform:rotate(180deg)}.vue-select.typing .single-value[data-v-7f19f42a]{opacity:0}.control[data-v-7f19f42a]{display:flex;min-height:32px;border:var(--vs-border);border-radius:var(--vs-border-radius);background-color:var(--vs-input-bg)}.control.focused[data-v-7f19f42a]{box-shadow:0 0 0 1px var(--vs-input-outline);border-color:var(--vs-input-outline)}.value-container[data-v-7f19f42a]{position:relative;display:flex;flex-wrap:wrap;align-items:center;flex-basis:100%;flex-grow:1}.value-container.multi[data-v-7f19f42a]{gap:var(--vs-multi-value-gap)}.single-value[data-v-7f19f42a]{display:flex;align-items:center;padding:var(--vs-padding);font-size:var(--vs-font-size);font-weight:var(--vs-font-weight);font-family:var(--vs-font-family);line-height:var(--vs-line-height);color:var(--vs-text-color);z-index:0}.multi-value[data-v-7f19f42a]{appearance:none;display:flex;align-items:center;gap:var(--vs-multi-value-gap);padding:var(--vs-multi-value-padding);margin:var(--vs-multi-value-margin);border:0;font-size:var(--vs-multi-value-font-size);font-weight:var(--vs-multi-value-font-weight);color:var(--vs-multi-value-text-color);line-height:var(--vs-multi-value-line-height);background:var(--vs-multi-value-bg);outline:none;cursor:pointer}.multi-value svg[data-v-7f19f42a]{width:var(--vs-multi-value-xmark-size);height:var(--vs-multi-value-xmark-size);fill:var(--vs-multi-value-xmark-color)}.search-input[data-v-7f19f42a]{appearance:none;display:inline-block;max-width:100%;flex-grow:1;width:0;margin:0;padding:0;border:0;background:none;padding:var(--vs-padding);font-size:var(--vs-font-size);font-family:var(--vs-font-family);line-height:var(--vs-line-height);color:var(--vs-text-color);outline:none;z-index:1}.search-input[data-v-7f19f42a]::placeholder{color:var(--vs-input-placeholder-color)}.indicators-container[data-v-7f19f42a]{display:flex;align-items:center;flex-shrink:0;gap:var(--vs-indicators-gap);padding:var(--vs-padding)}.clear-button[data-v-7f19f42a]{appearance:none;display:inline-block;padding:0;margin:0;border:0;width:var(--vs-icon-size);height:var(--vs-icon-size);color:var(--vs-icon-color);background:none;outline:none;cursor:pointer}.dropdown-icon[data-v-7f19f42a]{appearance:none;display:inline-block;padding:0;margin:0;border:0;width:var(--vs-icon-size);height:var(--vs-icon-size);color:var(--vs-icon-color);background:none;outline:none;cursor:pointer;transition:var(--vs-dropdown-transition)}.menu[data-v-7f19f42a]{position:absolute;left:0;right:0;padding:var(--vs-menu-padding);margin-top:var(--vs-menu-offset-top);max-height:var(--vs-menu-height);overflow-y:auto;border:var(--vs-menu-border);border-radius:var(--vs-border-radius);box-shadow:var(--vs-menu-box-shadow);background-color:var(--vs-menu-bg);z-index:var(--vs-menu-z-index)}.menu-option[data-v-7f19f42a]{display:flex;width:100%;border:0;margin:0;padding:var(--vs-option-padding);font-size:var(--vs-option-font-size);font-weight:var(--vs-option-font-weight);font-family:var(--vs-font-family);color:var(--vs-option-text-color);background-color:var(--vs-option-bg);text-align:-webkit-auto;cursor:pointer}.menu-option[data-v-7f19f42a]:hover{background-color:var(--vs-option-hover-color)}.menu-option.focused[data-v-7f19f42a]{background-color:var(--vs-option-focused-color)}.menu-option.selected[data-v-7f19f42a]{background-color:var(--vs-option-selected-color)}.menu-option.disabled[data-v-7f19f42a]{background-color:var(--vs-option-disabled-color);color:var(--vs-option-disabled-text-color)}.no-results[data-v-7f19f42a]{padding:var(--vs-option-padding);font-size:var(--vs-font-size);font-family:var(--vs-font-family);color:var(--vs-text-color)}')), document.head.appendChild(e);
    }
  } catch (a) {
    console.error("vite-plugin-css-injected-by-js", a);
  }
})();
var I = (s, r) => {
  const l = s.__vccOpts || s;
  for (const [f, n] of r)
    l[f] = n;
  return l;
};
var ie = {};
var se = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20",
  fill: "currentColor"
};
function ue(s, r) {
  return openBlock(), createElementBlock("svg", se, r[0] || (r[0] = [
    createBaseVNode("path", {
      "fill-rule": "evenodd",
      d: "M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z",
      "clip-rule": "evenodd"
    }, null, -1)
  ]));
}
var re = I(ie, [["render", ue]]);
var de = {};
var ce = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20",
  fill: "currentColor"
};
function pe(s, r) {
  return openBlock(), createElementBlock("svg", ce, r[0] || (r[0] = [
    createBaseVNode("path", { d: "M6.28 5.22a.75.75 0 0 0-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 1 0 1.06 1.06L10 11.06l3.72 3.72a.75.75 0 1 0 1.06-1.06L11.06 10l3.72-3.72a.75.75 0 0 0-1.06-1.06L10 8.94 6.28 5.22Z" }, null, -1)
  ]));
}
var P = I(de, [["render", pe]]);
var ve = ["aria-disabled", "aria-selected"];
var fe = defineComponent({
  __name: "MenuOption",
  props: {
    menu: {},
    index: {},
    isFocused: { type: Boolean },
    isSelected: { type: Boolean },
    isDisabled: { type: Boolean }
  },
  emits: ["select"],
  setup(s, { emit: r }) {
    const l = s, f = r, n = ref(null);
    return watch(
      () => l.isFocused,
      () => {
        if (l.isFocused && l.menu) {
          const d = l.menu.children[l.index], c = d.offsetTop, g = c + d.clientHeight, i = l.menu.scrollTop, u = l.menu.clientHeight;
          c < i ? l.menu.scrollTop = c : g > i + u && (l.menu.scrollTop = g - u);
        }
      }
    ), (d, c) => (openBlock(), createElementBlock("div", {
      ref_key: "option",
      ref: n,
      tabindex: "-1",
      role: "option",
      class: normalizeClass({ focused: d.isFocused, selected: d.isSelected, disabled: d.isDisabled }),
      "aria-disabled": d.isDisabled,
      "aria-selected": d.isSelected,
      onClick: c[0] || (c[0] = (g) => f("select")),
      onKeydown: c[1] || (c[1] = withKeys((g) => f("select"), ["enter"]))
    }, [
      renderSlot(d.$slots, "default")
    ], 42, ve));
  }
});
var be = {};
var me = { className: "spinner" };
function ye(s, r) {
  return openBlock(), createElementBlock("div", me, [
    (openBlock(), createElementBlock(Fragment, null, renderList(12, (l) => createBaseVNode("div", {
      key: l,
      class: "spinner-circle"
    })), 64))
  ]);
}
var he = I(be, [["render", ye], ["__scopeId", "data-v-ed866313"]]);
var ge = ["aria-expanded", "aria-describedby", "aria-description", "aria-labelledby", "aria-label", "aria-required"];
var ke = ["onClick"];
var Me = ["id", "disabled", "placeholder"];
var we = { class: "indicators-container" };
var $e = ["disabled"];
var Le = ["disabled"];
var De = ["aria-label", "aria-multiselectable"];
var Oe = {
  key: 0,
  class: "no-results"
};
var Se = defineComponent({
  __name: "Select",
  props: mergeModels({
    options: {},
    displayedOptions: {},
    placeholder: { default: "Select an option" },
    isClearable: { type: Boolean, default: true },
    isDisabled: { type: Boolean, default: false },
    isSearchable: { type: Boolean, default: true },
    isMulti: { type: Boolean, default: false },
    isLoading: { type: Boolean, default: false },
    shouldAutofocusOption: { type: Boolean, default: true },
    closeOnSelect: { type: Boolean, default: true },
    teleport: { default: void 0 },
    inputId: { default: void 0 },
    aria: { default: void 0 },
    filterBy: { type: Function, default: (s, r, l) => r.toLowerCase().includes(l.toLowerCase()) },
    getOptionLabel: { type: Function, default: (s) => s.label },
    getMultiValueLabel: { type: Function, default: (s) => s.label }
  }, {
    modelValue: {
      required: true,
      validator: (s, r) => r.isMulti ? Array.isArray(s) : !Array.isArray(s)
    },
    modelModifiers: {}
  }),
  emits: mergeModels(["optionSelected", "optionDeselected", "search"], ["update:modelValue"]),
  setup(s, { emit: r }) {
    const l = s, f = r, n = useModel(s, "modelValue"), d = ref(null), c = ref(null), g = ref(null), i = ref(""), u = ref(false), $ = ref(-1), y = computed(() => {
      const e = l.displayedOptions || l.options, a = (t) => t.filter(
        (o) => !n.value.includes(o.value)
      );
      if (l.isSearchable && i.value) {
        const t = e.filter((o) => {
          const L = l.isMulti ? l.getMultiValueLabel(o) : l.getOptionLabel(o);
          return l.filterBy(o, L, i.value);
        });
        return l.isMulti ? a(t) : t;
      }
      return l.isMulti ? a(e) : e;
    }), b = computed(() => {
      if (l.isMulti && Array.isArray(n.value))
        return n.value.map(
          (a) => l.options.find((t) => t.value === a)
        );
      l.isMulti && !Array.isArray(n.value) && console.warn(`[vue3-select-component warn]: The v-model provided should be an array when using \`isMulti\` prop, instead it was: ${n.value}`);
      const e = l.options.find((a) => a.value === n.value);
      return e ? [e] : [];
    }), D = (e) => {
      u.value = true, l.shouldAutofocusOption && ($.value = l.options.findIndex((a) => !a.disabled)), (e == null ? void 0 : e.focusInput) && c.value && c.value.focus();
    }, N = () => {
      u.value = false, i.value = "";
    }, j = () => {
      u.value ? N() : D();
    }, V = (e) => {
      e.disabled || (l.isMulti ? n.value.push(e.value) : n.value = e.value, f("optionSelected", e), i.value = "", l.closeOnSelect && (u.value = false), c.value && c.value.blur());
    }, q = (e) => {
      l.isMulti && !l.isDisabled && (n.value = n.value.filter((a) => a !== e.value), f("optionDeselected", e));
    }, X = () => {
      l.isMulti ? (n.value = [], f("optionDeselected", null)) : (n.value = void 0, f("optionDeselected", b.value[0])), u.value = false, i.value = "", c.value && c.value.blur();
    }, K = (e) => {
      if (u.value) {
        const a = $.value;
        if (e.key === "ArrowDown") {
          e.preventDefault();
          const o = y.value.findIndex((k, O) => !k.disabled && O > a), L = y.value.findIndex((k) => !k.disabled);
          $.value = o === -1 ? L : o;
        }
        if (e.key === "ArrowUp") {
          e.preventDefault();
          const o = y.value.reduce(
            (k, O, B) => !O.disabled && B < a ? B : k,
            -1
          ), L = y.value.reduce(
            (k, O, B) => O.disabled ? k : B,
            -1
          );
          $.value = o === -1 ? L : o;
        }
        if (e.key === "Enter") {
          const o = y.value[a];
          e.preventDefault(), o && V(o);
        }
        if (e.code === "Space" && i.value.length === 0) {
          const o = y.value[a];
          e.preventDefault(), o && V(o);
        }
        e.key === "Escape" && (e.preventDefault(), u.value = false, i.value = "");
        const t = l.isMulti ? n.value.length > 0 : !!n.value;
        e.key === "Backspace" && i.value.length === 0 && t && (e.preventDefault(), l.isMulti ? n.value = n.value.slice(0, -1) : n.value = void 0);
      }
    }, G = (e) => {
      !u.value && i.value.length === 0 && (e.preventDefault(), e.stopImmediatePropagation(), D());
    }, J = (e) => {
      e.key === "Tab" ? N() : e.key === "Space" && G(e);
    }, U = (e) => {
      d.value && !d.value.contains(e.target) && (u.value = false, i.value = "");
    }, x = () => {
      if (d.value) {
        const e = d.value.getBoundingClientRect();
        return {
          left: `${e.x}px`,
          top: `${e.y + e.height}px`
        };
      }
      return console.warn("Unable to calculate dynamic menu position because of missing internal DOM reference."), { top: "0px", left: "0px" };
    };
    return watch(
      () => i.value,
      () => {
        f("search", i.value), i.value && !u.value && D();
      }
    ), onMounted(() => {
      document.addEventListener("click", U), document.addEventListener("keydown", K);
    }), onBeforeUnmount(() => {
      document.removeEventListener("click", U), document.removeEventListener("keydown", K);
    }), (e, a) => {
      var _a, _b, _c, _d;
      return openBlock(), createElementBlock("div", {
        ref_key: "container",
        ref: d,
        dir: "auto",
        class: normalizeClass(["vue-select", { open: u.value, typing: u.value && i.value.length > 0, disabled: e.isDisabled }])
      }, [
        createBaseVNode("div", {
          class: normalizeClass(["control", { focused: u.value }])
        }, [
          createBaseVNode("div", {
            class: normalizeClass(["value-container", { multi: e.isMulti }]),
            role: "combobox",
            "aria-expanded": u.value,
            "aria-describedby": e.placeholder,
            "aria-description": e.placeholder,
            "aria-labelledby": (_a = e.aria) == null ? void 0 : _a.labelledby,
            "aria-label": b.value.length ? b.value.map(e.isMulti ? e.getMultiValueLabel : e.getOptionLabel).join(", ") : "",
            "aria-required": (_b = e.aria) == null ? void 0 : _b.required
          }, [
            !l.isMulti && b.value[0] ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: "single-value",
              onClick: a[0] || (a[0] = (t) => l.isDisabled ? null : D({ focusInput: true }))
            }, [
              renderSlot(e.$slots, "value", {
                option: b.value[0]
              }, () => [
                createTextVNode(toDisplayString(e.getOptionLabel(b.value[0])), 1)
              ], true)
            ])) : createCommentVNode("", true),
            l.isMulti && b.value.length ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(b.value, (t) => renderSlot(e.$slots, "tag", {
              key: t.value,
              option: t,
              removeOption: () => q(t)
            }, () => [
              createBaseVNode("button", {
                type: "button",
                class: "multi-value",
                onClick: (o) => q(t)
              }, [
                createTextVNode(toDisplayString(e.getMultiValueLabel(t)), 1),
                createVNode(P)
              ], 8, ke)
            ], true)), 128)) : createCommentVNode("", true),
            withDirectives(createBaseVNode("input", {
              id: e.inputId,
              ref_key: "input",
              ref: c,
              "onUpdate:modelValue": a[1] || (a[1] = (t) => i.value = t),
              class: "search-input",
              type: "text",
              "aria-autocomplete": "list",
              autocapitalize: "none",
              autocomplete: "off",
              autocorrect: "off",
              spellcheck: "false",
              tabindex: "0",
              disabled: e.isDisabled,
              placeholder: b.value.length === 0 ? e.placeholder : "",
              onMousedown: a[2] || (a[2] = (t) => D()),
              onKeydown: J
            }, null, 40, Me), [
              [vModelText, i.value]
            ])
          ], 10, ge),
          createBaseVNode("div", we, [
            b.value.length > 0 && e.isClearable && !e.isLoading ? (openBlock(), createElementBlock("button", {
              key: 0,
              type: "button",
              class: "clear-button",
              tabindex: "-1",
              disabled: e.isDisabled,
              onClick: X
            }, [
              renderSlot(e.$slots, "clear", {}, () => [
                createVNode(P)
              ], true)
            ], 8, $e)) : createCommentVNode("", true),
            e.isLoading ? createCommentVNode("", true) : (openBlock(), createElementBlock("button", {
              key: 1,
              type: "button",
              class: "dropdown-icon",
              tabindex: "-1",
              disabled: e.isDisabled,
              onClick: j
            }, [
              renderSlot(e.$slots, "dropdown", {}, () => [
                createVNode(re)
              ], true)
            ], 8, Le)),
            renderSlot(e.$slots, "loading", {}, () => [
              e.isLoading ? (openBlock(), createBlock(he, { key: 0 })) : createCommentVNode("", true)
            ], true)
          ])
        ], 2),
        (openBlock(), createBlock(Teleport, {
          to: e.teleport,
          disabled: !e.teleport,
          defer: true
        }, [
          u.value ? (openBlock(), createElementBlock("div", {
            key: 0,
            ref_key: "menu",
            ref: g,
            class: "menu",
            role: "listbox",
            "aria-label": (_c = e.aria) == null ? void 0 : _c.labelledby,
            "aria-multiselectable": e.isMulti,
            style: normalizeStyle({
              width: l.teleport ? `${(_d = d.value) == null ? void 0 : _d.getBoundingClientRect().width}px` : "100%",
              top: l.teleport ? x().top : "unset",
              left: l.teleport ? x().left : "unset"
            })
          }, [
            renderSlot(e.$slots, "menu-header", {}, void 0, true),
            (openBlock(true), createElementBlock(Fragment, null, renderList(y.value, (t, o) => (openBlock(), createBlock(fe, {
              key: o,
              type: "button",
              class: normalizeClass(["menu-option", { focused: $.value === o, selected: t.value === n.value }]),
              menu: g.value,
              index: o,
              "is-focused": $.value === o,
              "is-selected": t.value === n.value,
              "is-disabled": t.disabled || false,
              onSelect: (L) => V(t)
            }, {
              default: withCtx(() => [
                renderSlot(e.$slots, "option", { option: t }, () => [
                  createTextVNode(toDisplayString(e.getOptionLabel(t)), 1)
                ], true)
              ]),
              _: 2
            }, 1032, ["class", "menu", "index", "is-focused", "is-selected", "is-disabled", "onSelect"]))), 128)),
            y.value.length === 0 ? (openBlock(), createElementBlock("div", Oe, [
              renderSlot(e.$slots, "no-options", {}, () => [
                a[3] || (a[3] = createTextVNode(" No results found "))
              ], true)
            ])) : createCommentVNode("", true)
          ], 12, De)) : createCommentVNode("", true)
        ], 8, ["to", "disabled"]))
      ], 2);
    };
  }
});
var Ce = I(Se, [["__scopeId", "data-v-7f19f42a"]]);
export {
  Ce as default
};
//# sourceMappingURL=vue3-select-component.js.map
